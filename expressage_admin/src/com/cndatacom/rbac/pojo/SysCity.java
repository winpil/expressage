package com.cndatacom.rbac.pojo;

// Generated 2012-3-17 11:30:51 by Hibernate Tools 3.2.1.GA
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.struts2.json.annotations.JSON;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.GenericGenerator;

/**
 * SysCity generated by hbm2java
 */
@Entity
@Table(name="sys_city"
)
public class SysCity  implements java.io.Serializable {

	private static final long serialVersionUID = 6764948941078049122L;
	
	private String id;
    private String cityName;
    private Long sort;
    private String cityDesc;
    private boolean checked = false;
    private SysCity parent;//父地区
	private Set<SysCity> subCities = new HashSet<SysCity>();//子地区

    public SysCity() {
    }

	
    public SysCity(String id) {
        this.id = id;
    }
    public SysCity(String id, String cityName, Long sort, String cityDesc, SysCity parent) {
       this.id = id;
       this.cityName = cityName;
       this.sort = sort;
       this.cityDesc = cityDesc;
       this.parent = parent;
    }
   
     @Id 
 @GenericGenerator(name="generator",strategy="uuid")
 @GeneratedValue(generator="generator")
    
    @Column(name="ID", unique=true, nullable=false, length=32)
    public String getId() {
        return this.id;
    }
    
    public void setId(String id) {
        this.id = id;
    }
    
    @Column(name="CITY_NAME", length=20)
    public String getCityName() {
        return this.cityName;
    }
    
    public void setCityName(String cityName) {
        this.cityName = cityName;
    }
    
    @Column(name="SORT", precision=10, scale=0)
    public Long getSort() {
        return this.sort;
    }
    
    public void setSort(Long sort) {
        this.sort = sort;
    }
    
    @Column(name="CITY_DESC", length=500)
    public String getCityDesc() {
        return this.cityDesc;
    }
    
    public void setCityDesc(String cityDesc) {
        this.cityDesc = cityDesc;
    }
    
    @Transient
    public boolean isChecked() {
		return checked;
	}


	public void setChecked(boolean checked) {
		this.checked = checked;
	}
	
	@Transient
	public String getText() {
        return this.cityName;
    }
	
	@Transient
    public boolean isRoot() {
        return getParent() == null;
    }

	@Transient
    public boolean isLeaf() {
        return this.subCities.size() == 0;
    }
	
	@Transient
	public Set<SysCity> getChildren() {
	        return subCities;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="PARENT_ID")
	@JSON(serialize=false)
	public SysCity getParent() {
		return parent;
	}

	public void setParent(SysCity parent) {
		this.parent = parent;
	}
	
	@OneToMany(cascade={CascadeType.REMOVE,CascadeType.REFRESH})
    @JoinColumn(name="PARENT_ID")
    @OrderBy("sort asc,id asc")
    @Fetch(FetchMode.SUBSELECT)
    @JSON(serialize=false)
    
	public Set<SysCity> getSubCities() {
		return subCities;
	}

	public void setSubCities(Set<SysCity> subCities) {
		this.subCities = subCities;
	}
}


